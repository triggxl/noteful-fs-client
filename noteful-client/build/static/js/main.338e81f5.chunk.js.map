{"version":3,"sources":["NoteContext.js","DisplayFolderLinks.js","DisplayAllNotes.js","HomePage.js","DisplayIndividualNoteDetails.js","util.js","DisplaySelectedFolderNotes.js","FormValidationErrors.js","AddNoteForm.js","AddFolderForm.js","NotefulErrors.js","config.js","App.js","index.js"],"names":["NotefulContext","React","createContext","notes","folders","handledeleteNote","handleAddNote","handleAddFolder","DisplayFolderLinks","props","Consumer","context","className","map","folder","id","folderProps","key","to","name","DisplayAllNotes","note","modified","onClick","e","handleDeleteNote","HomePage","DisplayIndividualNoteDetails","content","getSelectedFolder","folderId","selectedFolder","find","DisplaySelectedFolderNotes","arrayOfNotes","filter","FormValidationErrors","message","AddNoteForm","state","noteName","value","touched","noteContent","folderOptions","folderNameRef","createRef","preventDefault","this","history","push","setState","length","current","focus","console","log","onSubmit","handleSubmit","ref","type","onChange","updateNoteName","target","validateNoteName","aria-required","aria-describedby","aria-label","tooShort","updateNoteContent","aria-invalid","validateNoteContent","updateFolderName","disabled","Component","contextType","defaultProps","PropTypes","string","isRequired","withRouter","AddFolderForm","updateName","userEntry","folderName","validateName","NotefulErrors","hasError","children","error","API_URL","App","index","i","splice","data","elements","fetch","method","headers","body","JSON","stringify","then","res","ok","Error","status","json","catch","newFolder","concat","Provider","exact","path","render","component","routeProps","match","params","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.338e81f5.chunk.js","sourcesContent":["import React from 'react';\n\n//1. creating default context for Noteful app\nconst NotefulContext = React.createContext({\n  notes: [],\n  folders: [],\n  handledeleteNote: ()=> {},\n  handleAddNote: ()=> {},\n  handleAddFolder: ()=> {}\n})\n\nexport default NotefulContext;\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport NotefulContext from './NoteContext';\n\nfunction DisplayFolderLinks(props) {\n  return (\n    <NotefulContext.Consumer>\n      {(context) => {\n        return(\n          <div className=\"displayFolderLinks\"> \n          {props.folders.map((folder, id) => {\n            let folderProps = `/folders/${folder.id}`;\n            return (\n              <section key={id} className=\"folderBtn\">\n              <Link to={folderProps}>\n              {folder.name}\n              </Link>\n              </section>\n            )\n          })}\n          <Link to=\"/add-folders\">\n            <button className=\"addFolderBtn\">Add Folder</button>\n          </Link>\n          </div>\n        )\n      }}\n    </NotefulContext.Consumer>\n  )\n}\n\nexport default DisplayFolderLinks;\n\n/*\nonly use dot method when you know the exact key or when file name includes _ or -'s\ncomponent tree and data flow\n*/","import React from 'react'\nimport NotefulContext from './NoteContext';\nimport { Link } from 'react-router-dom';\n\nconst DisplayAllNotes = (props) => {\n  const { notes } = props;\n  return (\n    <NotefulContext.Consumer>\n      {(context) => {\n        return(\n          <>\n          <div className=\"individualNoteData\">\n          {notes.map((note, id)=>{\n            return(\n              <div key={id}>\n                <h4>Name:</h4>\n                {note.name}\n                <h4>Last modified on:</h4>\n                {note.modified}\n                <Link to=\"/\">\n                  <button className=\"deleteNoteBtn\" onClick={e => context.handleDeleteNote(e)}>Delete</button>\n                </Link>\n              </div>\n            )\n         })}\n          </div>\n          <Link to='/add-notes'><button className=\"allNotesBtn\">AddNote</button></Link>\n          </>\n        )\n      }}\n    </NotefulContext.Consumer> \n  )\n}\n\nexport default DisplayAllNotes;\n","import React from 'react';\nimport DisplayFolderLinks from './DisplayFolderLinks';\nimport DisplayAllNotes from './DisplayAllNotes';\nimport './App.css';\nimport NotefulContext from './NoteContext';\n\nexport default function HomePage() {\n  return (\n    <NotefulContext.Consumer>\n      {(context) => (\n        <div className=\"homePage\">\n          <section className=\"mainFolderStyling\">\n            <DisplayFolderLinks folders={context.folders}/>\n          </section>\n          <section className=\"mainNoteStyling\">\n            <DisplayAllNotes notes={context.notes}/>\n          </section>\n        </div>\n      )}\n    </NotefulContext.Consumer>\n)\n}\n\n//upon deletion debugging, my errors have to do with how I've set up context in HomePage.js and DisplayFolderLinks \n\n","import React from 'react';\nimport NotefulContext from './NoteContext';\n\nfunction DisplayIndividualNoteDetails(props) {\n  //specific to this component (singular) passing notes, folders (plural) through context\n  const { note, folder } = props;\n  return (\n    <NotefulContext.Consumer>\n      {({ handleDeleteNote } )=> (\n        <div>\n         <div className=\"individualNoteData\">\n           <h3>{folder.name}</h3>\n           <h4>Name:</h4>\n             {note.name}\n           <h4>Last modified on:</h4>\n             {note.modified}\n             <br/>\n             {note.content}\n           <button onClick={handleDeleteNote} className=\"deleteNoteBtn\">Delete</button>\n         </div>\n           <div>\n           <button>Go back</button>\n           </div>\n       </div>\n      ) \n      }\n    </NotefulContext.Consumer>\n  )\n\n}\n\n// 1. grab the folder id from the note 2. using the folder id find it on the folders array 3. display the name\n\nexport default DisplayIndividualNoteDetails;","export const getSelectedFolder = (folders, folderId) => {\n  let selectedFolder = folders.find(folder => folder.name === folderId);\n    if(!selectedFolder) {\n      selectedFolder = folders[0];\n    }\n    return selectedFolder\n}\n\n// created named { } export function to use dynamically throughout application","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport NotefulContext from './NoteContext';\nimport { getSelectedFolder } from './util';\n\nconst DisplaySelectedFolderNotes = (props) => {\n  return (\n    <NotefulContext.Consumer>\n      {(context)=>{\n        const selectedFolder = getSelectedFolder(context.folders, props.folderId)        \n        const arrayOfNotes = context.notes.filter((note)=> note.folderId === props.folderId);\n        return(\n          <div key={context.folderId}>\n          <h3 className=\"\">{selectedFolder.name}</h3>\n          {/* displaying notes from selected folder */}\n          {arrayOfNotes.map((note)=>\n            <div className=\"\" key={note.id}>\n              <Link to={`/notes/${note.id}`}>\n              {note.name}\n              </Link>\n              {note.modified}\n            </div>\n            )}\n            <Link to=\"/\">\n              <button>Go back</button>\n            </Link>\n        </div>\n        )\n      }}\n    </NotefulContext.Consumer>\n  )\n}\n\nexport default DisplaySelectedFolderNotes;\n\n//Concepts: setting up routes and using routeProps to grab information from the URL use in the component that you want to render\n//create a filteredFolders variable (above) and then map through those folder to output data in that in JSX ex: <h3>\n//1. grab folderId from URL from routeProps...2. filter over note array using id that you grab...3. map through filtered notes and display them\n","import React from 'react';\n\nexport default function FormValidationErrors(props) {\n  if(props.message)\n  return (\n    <div className=\"error\">\n      {props.message}     \n    </div>\n  )\n  return <></>\n}\n","import React from \"react\";\nimport FormValidationErrors from \"./FormValidationErrors\";\nimport PropTypes from \"prop-types\";\nimport NotefulContext from \"./NoteContext\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { getSelectedFolder } from \"./util\";\n\nclass AddNoteForm extends React.Component {\n  static contextType = NotefulContext;\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteName: {\n        value: \"\",\n        touched: false,\n      },\n      noteContent: {\n        value: \"\",\n        touched: false,\n      },\n      folderOptions: {\n        value: \"\",\n        touched: false,\n      },\n    };\n    this.folderNameRef = React.createRef();\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    const selectedFolder = getSelectedFolder(this.context.folders, this.state.folderOptions.value)\n    // debugger;\n    this.context.handleAddNote(e, this.state.noteName.value, this.state.noteContent.value, selectedFolder.id)\n    this.props.history.push(\"/\");\n  }\n  updateNoteName(noteName) {\n    this.setState({\n      noteName: {\n        value: noteName,\n        touched: true,\n      },\n    });\n  }\n  updateNoteContent(noteContent) {\n    this.setState({\n      noteContent: {\n        value: noteContent,\n        touched: true,\n      },\n    });\n  }\n\n  //not working\n  // () => {\n  //   if(this.state.tooShort) {\n  //     this.tooShort.current.focus\n  //   }\n  // }\n  updateFolderName(folderOptions) {\n    this.setState({\n      folderOptions: {\n        value: folderOptions\n      }\n    });\n  }\n  validateNoteName() {\n    const note = this.state.noteName.value;\n    if (note.length === 0) {\n      return \"Note name is required\";\n    } else if (note.length < 3) {\n      return \"Must be at least 3 characters\";\n    }\n  }\n  validateNoteContent() {\n    const noteContent = this.state.noteContent.value;\n    if (noteContent === '') {\n      return \"Note must contain some content\";\n    }\n  }\n  // using a specific library that isn't designed for React to get access to a native element\n  componentDidMount() {\n    this.folderNameRef.current.focus();\n  }\n  render() {\n    console.log(this.state.noteContent)\n    return (\n      <NotefulContext.Consumer>\n        {(context) => {\n          return (\n            <>\n              <Link to=\"/\">Go back</Link>\n              <form\n                className=\"newNoteForm\"\n                onSubmit={(e) => this.handleSubmit(e)}\n              >\n                <h2>Create a Note</h2>\n                <label>Name:</label>\n                <input\n                  ref={this.folderNameRef}\n                  name=\"noteName\"\n                  type=\"text\"\n                  value={this.state.noteName.value}\n                  onChange={(e) => this.updateNoteName(e.target.value)}\n                ></input>\n                {this.state.noteName.touched && (\n                  <FormValidationErrors message={this.validateNoteName()} />\n                )}\n                <label>Content:</label>\n                <input\n                  type=\"text\"\n                  name=\"nameDescription\"\n                  id=\"nameDescription\"\n                  aria-required=\"true\"\n                  aria-describedby=\"nameDescription\"\n                  aria-label=\"Enter note description\"\n                  ref={this.tooShort}\n                  value={this.state.noteContent.value}\n                  onChange={(e) => this.updateNoteContent(e.target.value)}\n                  aria-invalid={this.tooShort}\n                ></input>\n                {this.state.noteContent.touched && (\n                  <FormValidationErrors message={this.validateNoteContent()} />\n                )}\n                <label>Folder:</label>\n                <select\n                  name=\"noteFolder\"\n                  value={this.state.folderOptions.value}\n                  onChange={(e) => this.updateFolderName(e.target.value)}\n                >\n                {context.folders.map((folder)=> <option>{folder.name}</option>)}\n                </select>\n                {this.state.touched && (\n                  <FormValidationErrors message={this.validateNoteName()} />\n                )}\n                {/* play with CSS in the DOM cut/paste elements to rearrange */}\n                <button \n                type=\"submit\" \n                className=\"AddNewNoteBtn\"\n                //upon focus, upon typing and deleting  \n                disabled={this.validateNoteName() || this.validateNoteContent()}>Add Note</button>\n              </form>\n            </>\n          );\n        }}\n      </NotefulContext.Consumer>\n    );\n  }\n}\nAddNoteForm.propTypes = {\n  note: (props, propName, componentName) => {\n    const prop = props[propName];\n    if (!prop) {\n      return new Error(`${propName} is required for ${componentName}.`);\n    }\n  },\n};\nAddNoteForm.defaultProps = {\n  noteName: PropTypes.string.isRequired,\n  noteContent: PropTypes.isRequired\n};\n\nexport default withRouter(AddNoteForm);\n\n","import React, { Component } from 'react';\nimport FormValidationErrors from './FormValidationErrors';\nimport PropTypes from 'prop-types';\nimport NotefulContext from './NoteContext';\nimport { Link, withRouter } from 'react-router-dom';\n\nclass AddFolderForm extends Component {\n  static contextType = NotefulContext;\n  constructor(props) {\n    super(props);\n    this.state = {\n      folderName : {\n        value: '',\n        touched: false\n      }\n    }\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.context.handleAddFolder(e);\n    this.props.history.push('/'); //withRouter\n  }\n  updateName = (userEntry) => {\n    this.setState({ \n      folderName: {\n        value: userEntry,\n        touched: true\n      }\n    });\n  } \n  validateName = () => {\n    const name = this.state.folderName.value;\n    if(name.length === 0) {\n      return 'Folder name is required';\n    }\n  }\n \n  render() {\n    return(\n      <NotefulContext.Consumer>\n       { (context)=> {\n          return(\n            <>\n            <Link to='/'>Go back</Link>\n            <form className=\"newFolderForm\" onSubmit={e => this.handleSubmit(e)}>\n              <h2>Create a Folder</h2>\n              <label>Name:</label>\n              <input name=\"folderName\" type=\"text\" value={this.state.folderName.value} onChange={e => this.updateName(e.target.value)}></input> \n              {this.state.folderName.touched && ( <FormValidationErrors message={this.validateName()}/>)}\n              <button className=\"AddNewFolderBtn\">Add Folder</button>\n            </form>\n          </>\n          )\n        }}\n      </NotefulContext.Consumer>\n    )\n  }\n}\n\nAddFolderForm.propTypes = {\n  name : (props, propName, componentName) => {\n    const prop = props[propName];\n    if(!prop) {\n      return new Error(`${propName} is required for ${componentName}.`);\n    }\n  }\n}\n\nAddFolderForm.defaultProps = {\n  name : PropTypes.string\n}\n\nexport default withRouter(AddFolderForm);\n\n/*\ncreating a controlled input...need to have a name value and onChange property attatched to each input...need to update state to hold current value of form field upon input\nvalue attribute = what you're using to store the value at that time ex: this.state.[name attribute value]\nonChange changes state to the current value of that input\nstate prop used needs to match name attribute value\ndynamic onChange for multiple controlled inputs needs to know which input is being changed passing the name property\nwrite out comments first and then write out the code so you can explain what you're trying to do what they are how they function\n*/\n","import React from 'react';\n\nclass NotefulErrors extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n  static getDerivedStateFromError(error) {\n    return { hasError: true};\n  }\n  render() {\n    if(this.state.hasError) {\n      return <h2>Page could not be displayed at this time</h2>\n    }\n    return this.props.children;\n  }\n}\n\nexport default NotefulErrors;","export const API_URL = process.env.NODE_ENV === 'production' ? 'https://thawing-citadel-11081.herokuapp.com' : 'http://localhost:9090';","import React from 'react';\nimport { Route, Switch, Link, Redirect } from 'react-router-dom';\nimport MainRoute from './HomePage';\nimport DisplayIndividualNoteDetails from './DisplayIndividualNoteDetails';\nimport DisplaySelectedFolderNotes from './DisplaySelectedFolderNotes';\nimport NotefulContext from './NoteContext';\nimport AddNoteForm from './AddNoteForm';\nimport AddFolderForm from './AddFolderForm';\nimport NotefulErrors from './NotefulErrors';\nimport { API_URL } from './config';\n\nclass App extends React.Component {\n  static contextType = NotefulContext;\n  state = {\n    folders: [\n      \n    ],\n    notes: [\n      \n    ]\n  }\n  handleDeleteNote = (id) => {\n    const { notes } = this.state\n    let index = -1;\n    for(let i = 0; i < notes.length; i++) {\n      if(notes[i].id === id) {\n        index = i;\n      }\n    }\n    notes.splice(index, 1); //removing (1) index variable \n    this.setState({\n      notes : notes\n    })\n  }\n  handleAddFolder = (e) => {\n    e.preventDefault();\n    //target the variable that holds the element where the event occured\n    let folderName = e.target.elements[\"folderName\"].value;\n    let data = { name: folderName }\n    fetch(`${API_URL}/folders`, {\n      method: 'POST',\n      headers: {\n        'content-type' : 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(res => {\n      if(!res.ok) {\n        throw new Error(res.status)\n      }\n      return res.json()\n    }).catch(error => this.setState({ error }\n    )).then(newFolder => \n      this.setState({\n      folders : [...this.state.folders, newFolder]\n    }))\n  }\n  handleAddNote = (e, name, content, folderId ) => {\n    e.preventDefault();\n    let data = { \n      name: name, \n      content: content,\n      folderId: folderId\n    };\n    fetch(`${API_URL}/notes`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(res => {\n      if(!res.ok) {\n        throw new Error(res.status)\n      }\n      return res.json()\n    }).catch(error => this.setState({ error }\n    )).then((data) => {\n      this.setState({\n      notes : this.state.notes.concat(data)\n    })})\n  }\n  componentDidMount() {\n    fetch(`${API_URL}/folders`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n    .then(res => {\n      if(!res.ok) {\n        throw new Error(res.status)\n      }\n      return res.json()\n    })\n    .then(data => this.setState({folders : data}))\n    fetch(`${API_URL}/notes`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n    .then(res => {\n      if(!res.ok) {\n        throw new Error(res.status)\n      }\n      return res.json()\n    })\n    .then(data => {\n      this.setState({notes : data})\n    })\n  }\n  render() {\n    const { folders, notes } = this.state;\n    const handleDeleteNote = this.handleDeleteNote;\n    const handleAddFolder = this.handleAddFolder;\n    const handleAddNote = this.handleAddNote;\n\n    return(\n      <NotefulErrors>\n      <div className='App'>\n        <header className=\"notefulHeader\">\n        <Link to=\"/\">\n          Noteful\n        </Link>\n        </header>\n        <main>\n          <NotefulContext.Provider value={{ folders, notes, handleDeleteNote, handleAddFolder, handleAddNote }}>\n            <Switch>\n              <Route \n                exact \n                path='/' \n                render={()=> \n                <MainRoute/>\n              }\n              />\n              <Route path='/add-folders' component={AddFolderForm}/>\n              <Route \n                path='/folders/:id'\n                render={(routeProps)=> \n                <DisplaySelectedFolderNotes routeProps={routeProps} \n                folderId={routeProps.match.params.id}\n                />}/>\n              <Route path='/add-notes' component={AddNoteForm}/>\n              <Route \n                path='/notes/:id' \n                render={(routeProps)=> {\n                  const note = this.state.notes.find((note)=> routeProps.match.params.id === note.id);\n                  if (note == null) { return <Redirect to={('/')}/>; }\n                  // console.log(note, routeProps.match.params.id )\n                  const folder = this.state.folders.find((folder)=> note.folderId === folder.id);\n                  return <DisplayIndividualNoteDetails note={note} content={note.content} folder={folder} handleDeleteNote={this.handleDeleteNote} handleAddNote={this.handleAddNote}/> \n                  }} \n              />\n            </Switch>\n          </NotefulContext.Provider>\n        </main>\n      </div>\n      </NotefulErrors>\n    );\n  }\n}\n\nexport default App;\n\n\n/*\n11/12\nNext Steps:\nwhen trying to add a note, context.folders is an empty array so handleAddNote doesn't recognize need to figure out why this.context is empty here in app\n\nSummary:\n  Needed a folder name looped through existing folder name and rendered each of them as an option under our select element\n  info stored in that forms state upon submission we took user info and called handleAddNote and gave it all user info passing them as args\n  used context to access our folders in context to find whose name matches the name that was input. once we find that folder we grabbed the id from it\nCompleted:\nadd new note on server (currently logging to console)\nadd values dynamically to dropdown list\n\nWhat's left: (\"how do you...\") \nerror checking shouldn’t show immediately (when adding note)\n(x) set up error boundary\n(added content goes away after restarting the server)\n  Additional: \n  Add Note button to bottom of notes container\n  delete functionality for notes and folders\n\n //grabbing id within the array of notes object and storing it in index variable\n      if(notes[i].id === id) {\n        index = i;\n      }\n\n11/2\nSteps to complete:\nOrganizing your React code assignment:\nadd two forms for POSTing new folders and new Notes to the server\nadd error boundaries at appropriate places in the structure\nrefactor the components to use PropTypes to validate the props\n\nSteps to complete:\n1. Display all folders in the main route. (You need to map through them so you need them as props)\n2. When you click on a folder you need to filter the notes that belong to that folder. (You will need the folder Id for this one. The folder Id can be sent through the url and grabbed from the route props)\n3. When clicking on Noteful you should link it back to the main route.\n4. When clicking on a Note you should display the note's detail. (For this you will also need the noteId which will be sent in the url and grabbed from the route props)\n\nTips/Advice: \nDate: Subject: Steps to accomplish: \"this is what I want to do, how I want to do it is...\"--\n-explain it in every-day language 1. know/identify the problem 2. how you wanna solve it and 3. translating it into code\nsetting and updating the state and passing parameters, also handlers understanding what's going on \n-think of Routes as if statements: 'if route, carry out these instructions..'\n-\"grab data from form event handler react\" https://stackoverflow.com/questions/23427384/get-form-data-in-reactjs\n-return an empty function: ()=> {}\n-make sure you have a skeleton of the DOM visual aspects first then work on functionality--value{} = what info you want globally available\n-add console.log above outter most return statement\n-use bracket notation when name has _ or -\nTo send down props to a Route you do the following:\n<Route path=\"/path/here\" render={ (routeProps) => <NameOfComponent {...routeProps} anyOtherProp={value} /> } />\n\nResources:\nhttps://www.loom.com/share/536bf064e7c0451691930b37345526dd\nhttps://reactrouter.com/web/guides/quick-start\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}